{
    // tsconfig.json 是ts编译器的配置文件，ts编译器可以根据它的信息来对代码进行编译

    // "include"  用来制定那些ts需要被编译
    //  **   任意文件夹
    //  *    任意文件
    "include": [
        "./src/*"
    ],

    // "exclude" 不需要被编译的文件目录
    "exclude": [
        "./src/index.ts"
    ],

    // 定义被继承的配置文件
    // "extends": "./configs/base",

    // 指定被编译文件的列表，只有需要编译的文件少时才会用到
    // "files": [
    //     "app.ts",
    // ]

    // compilerOptions 编译器的配置选项
    "compilerOptions": {
        
        // target 用来指定编译后为ES版本
        // 传入错误的版本,报错如下：
        // Argument for '--target' option must be: 'es3', 'es5', 'es6', 'es2015', 'es2016', 'es2017', 'es2018', 'es2019', 'es2020', 'es2021', 'esnext'.
        "target": "es2015",

        // module 指定要使用的模块化的规范
        // js有不同版本的模块化的方案，例如：
        // Argument for '--module' option must be: 'none', 'commonjs', 'amd', 'system', 'umd', 'es6', 'es2015', 'es2020', 'es2022', 'esnext', 'node12', 'nodenext'.
        "module": "commonjs",

        // lib 用来指定项目中要使用的库
        // Argument for '--lib' option must be: 'es5', 'es6', 'es2015', 'es7', 'es2016', 'es2017', 'es2018', 'es2019', 'es2020', 'es2021', 'esnext', 'dom', 'dom.iterable', 'webworker', 'webworker.importscripts', 'webworker.iterable', 'scripthost', 'es2015.core', 'es2015.collection', 'es2015.generator', 'es2015.iterable', 'es2015.promise', 'es2015.proxy', 'es2015.reflect', 'es2015.symbol', 'es2015.symbol.wellknown', 'es2016.array.include', 'es2017.object', 'es2017.sharedmemory', 'es2017.string', 'es2017.intl', 'es2017.typedarrays', 'es2018.asyncgenerator', 'es2018.asynciterable', 'es2018.intl', 'es2018.promise', 'es2018.regexp', 'es2019.array', 'es2019.object', 'es2019.string', 'es2019.symbol', 'es2020.bigint', 'es2020.promise', 'es2020.sharedmemory', 'es2020.string', 'es2020.symbol.wellknown', 'es2020.intl', 'es2021.promise', 'es2021.string', 'es2021.weakref', 'es2021.intl', 'esnext.array', 'esnext.symbol', 'esnext.asynciterable', 'esnext.intl', 'esnext.bigint', 'esnext.string', 'esnext.promise', 'esnext.weakref'.
        // "lib": ["es6"]

        
    }
}